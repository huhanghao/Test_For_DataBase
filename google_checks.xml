<?xml version="1.0"?><!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!--
    Checkstyle configuration that checks the Google coding conventions from Google Java Style
    that can be found at https://google.github.io/styleguide/javaguide.html.

    Checkstyle is very configurable. Be sure to read the documentation at
    http://checkstyle.sf.net (or in your downloaded distribution).

    To completely disable a check, just comment it out or delete it from the file.

    Authors: Max Vetrenko, Ruslan Diachenko, Roman Ivanov.
 -->

<module name="Checker">
    <property name="charset" value="UTF-8" />
    <property name="severity" value="warning" />

    <property name="fileExtensions" value="java, properties, xml" />
    <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true" />
    </module>

    <!-- Checks for Size Violations.  -->
    <!-- 检查文件的长度（行） default max=2000 -->
    <module name="FileLength">
        <property name="max" value="2500" />
    </module>

    <module name="TreeWalker">
        <module name="OuterTypeFilename" />
        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL" />
            <property name="format"
                value="\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)" />
            <property name="message"
                value="Consider using special escape sequence instead of octal value or Unicode escaped value." />
        </module>
        <module name="AvoidEscapedUnicodeCharacters">
            <property name="allowEscapesForControlCharacters" value="true" />
            <property name="allowByTailComment" value="true" />
            <property name="allowNonPrintableEscapes" value="true" />
        </module>

        <!-- 每行字符数 -->
        <module name="LineLength">
            <property name="max" value="200" />
            <property name="ignorePattern"
                value="^package.*|^import.*|a href|href|http://|https://|ftp://" />
        </module>

        <!-- Checks for imports    -->
        <!-- 必须导入类的完整路径，即不能使用*导入所需的类 -->
        <module name="AvoidStarImport" />

        <!-- 检查是否导入了不必显示导入的类-->
        <module name="RedundantImport" />

        <!-- 检查是否导入的包没有使用-->
        <module name="UnusedImports" />


        <module name="OneTopLevelClass" />
        <module name="NoLineWrap" />
        <module name="EmptyBlock">
            <property name="option" value="TEXT" />
            <property name="tokens"
                value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH" />
        </module>

        <!-- NeedBraces 检查是否应该使用括号的地方没有加括号
                tokens: 定义检查的类型 -->
        <module name="NeedBraces" />

        <!--option: 定义左大括号'{'显示位置，eol在同一行显示，nl在下一行显示
            maxLineLength: 大括号'{'所在行行最多容纳的字符数
            tokens: 该属性适用的类型，例：CLASS_DEF,INTERFACE_DEF,METHOD_DEF,CTOR_DEF -->
        <module name="LeftCurly">
            <property name="option" value="eol"/>
            <property name="maxLineLength" value="200" />
        </module>

        <!-- Checks the placement of right curly braces ('}') for  else, try, and catch tokens. The policy to verify is specified using property  option.
              option: 右大括号是否单独一行显示
              tokens: 定义检查的类型  -->
        <module name="RightCurly">
            <property name="id" value="RightCurlySame" />
            <property name="tokens"
                value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_DO" />
        </module>

        <module name="RightCurly">
            <property name="id" value="RightCurlyAlone" />
            <property name="option" value="alone" />
            <property name="tokens"
                value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT" />
        </module>
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true" />
            <property name="allowEmptyMethods" value="true" />
            <property name="allowEmptyTypes" value="true" />
            <property name="allowEmptyLoops" value="true" />
            <message key="ws.notFollowed"
                value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)" />
            <message key="ws.notPreceded"
                value="WhitespaceAround: ''{0}'' is not preceded with whitespace." />
        </module>

        <module name="OneStatementPerLine" />

        <!-- 每一行只能定义一个变量 -->
        <module name="MultipleVariableDeclarations" />

        <!-- Checks the style of array type definitions. Some like Java-style: public static void main(String[] args) and some like C-style: public static void main(String args[])
       检查再定义数组时，采用java风格还是c风格，例如：int[] num是java风格，int num[]是c风格。默认是java风格-->
        <module name="ArrayTypeStyle" />

        <module name="MissingSwitchDefault" />

        <!--检查switch中case后是否加入了跳出语句，例如：return、break、throw、continue -->
        <module name="FallThrough" />

        <!--  Checks that long constants are defined with an upper ell. That is ' L' and not 'l'. This is in accordance to the Java Language Specification,  Section 3.10.1.
            检查是否在long类型是否定义了大写的L.字母小写l和数字1（一）很相似。
            looks a lot like 1. -->
        <module name="UpperEll" />

        <!-- ModifierOrder 检查修饰符的顺序，默认是 public,protected,private,abstract,static,final,transient,volatile,synchronized,native -->
        <module name="ModifierOrder" />

        <!--- 字符串比较必须使用 equals() -->
        <module name="StringLiteralEquality"/>

        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true" />
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapDot" />
            <property name="tokens" value="DOT" />
            <property name="option" value="nl" />
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapComma" />
            <property name="tokens" value="COMMA" />
            <property name="option" value="EOL" />
        </module>
        <!--<module name="PackageName">-->
        <!--<property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>-->
        <!--<message key="name.invalidPattern"-->
        <!--value="Package name ''{0}'' must match pattern ''{1}''."/>-->
        <!--</module>-->
        <module name="TypeName">
            <message key="name.invalidPattern"
                value="Type name ''{0}'' must match pattern ''{1}''." />
        </module>
        <!-- <module name="MemberName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
             value="Member name ''{0}'' must match pattern ''{1}''."/>
        </module> -->

        <module name="MemberName">
            <property name="format" value="^[a-z][\w]*$" />
        </module>

        <module name="ParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$" />
            <message key="name.invalidPattern"
                value="Parameter name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="CatchParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$" />
            <message key="name.invalidPattern"
                value="Catch parameter name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="LocalVariableName">
            <property name="tokens" value="VARIABLE_DEF" />
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$" />
            <message key="name.invalidPattern"
                value="Local variable name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="ClassTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
            <message key="name.invalidPattern"
                value="Class type name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="MethodTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
            <message key="name.invalidPattern"
                value="Method type name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="InterfaceTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
            <message key="name.invalidPattern"
                value="Interface type name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="NoFinalizer" />
        <module name="GenericWhitespace">
            <message key="ws.followed"
                value="GenericWhitespace ''{0}'' is followed by whitespace." />
            <message key="ws.preceded"
                value="GenericWhitespace ''{0}'' is preceded with whitespace." />
            <message key="ws.illegalFollow"
                value="GenericWhitespace ''{0}'' should followed by whitespace." />
            <message key="ws.notPreceded"
                value="GenericWhitespace ''{0}'' is not preceded with whitespace." />
        </module>
        <module name="Indentation">
            <property name="basicOffset" value="4" />
            <property name="braceAdjustment" value="0" />
            <property name="caseIndent" value="4" />
            <property name="throwsIndent" value="4" />
            <property name="lineWrappingIndentation" value="4" />
            <property name="arrayInitIndent" value="4" />
        </module>
        <module name="AbbreviationAsWordInName">
            <property name="ignoreFinal" value="false" />
            <property name="allowedAbbreviationLength" value="1" />
        </module>
        <module name="OverloadMethodsDeclarationOrder" />
        <module name="VariableDeclarationUsageDistance" />
        <module name="CustomImportOrder">
            <property name="sortImportsInGroupAlphabetically" value="false" />
            <property name="separateLineBetweenGroups" value="true" />
            <!--<property name="customImportOrderRules" value="STATIC###THIRD_PARTY_PACKAGE"/>-->
        </module>
        <module name="MethodParamPad" />
        <module name="ParenPad" />
        <module name="OperatorWrap">
            <property name="option" value="NL" />
            <property name="tokens"
                value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR, METHOD_REF " />
        </module>
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationMostCases" />
            <property name="tokens"
                value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF" />
        </module>
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationVariables" />
            <property name="tokens" value="VARIABLE_DEF" />
            <property name="allowSamelineMultipleAnnotations" value="true" />
        </module>
        <module name="NonEmptyAtclauseDescription" />
        <module name="JavadocTagContinuationIndentation" />
        <module name="SummaryJavadoc">
            <property name="forbiddenSummaryFragments"
                value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )" />
        </module>
        <module name="JavadocParagraph" />
        <module name="AtclauseOrder">
            <property name="tagOrder" value="@param, @return, @throws, @deprecated" />
            <property name="target"
                value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF" />
        </module>

        <!-- 检查方法的javadoc的注释
             scope: 可以检查的方法的范围，例如：public只能检查public修饰的方法，private可以检查所有的方法
             allowMissingParamTags: 是否忽略对参数注释的检查
             allowMissingThrowsTags: 是否忽略对throws注释的检查
             allowMissingReturnTag: 是否忽略对return注释的检查 -->
        <module name="JavadocMethod">
            <property name="scope" value="public" />
            <property name="allowMissingParamTags" value="true" />
            <property name="allowMissingThrowsTags" value="true" />
            <property name="allowMissingReturnTag" value="true" />
            <property name="minLineCount" value="2" />
            <property name="allowedAnnotations" value="Override, Test" />
            <property name="allowThrowsTagsForSubclasses" value="true" />
            <!--允许get set 方法没有注释-->
            <property name="allowMissingPropertyJavadoc" value="true"/>
        </module>

        <!-- 检查类变量的注释
                scope: 检查变量的范围，例如：public只能检查public修饰的变量，private可以检查所有的变量 -->
        <module name="JavadocVariable">
            <property name="scope" value="private" />
        </module>
        <module name="MethodName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$" />
            <message key="name.invalidPattern"
                value="Method name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="SingleLineJavadoc">
            <property name="ignoreInlineTags" value="false" />
        </module>
        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="expected" />
        </module>
        <module name="CommentsIndentation" />
    </module>
</module>
